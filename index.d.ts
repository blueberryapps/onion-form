/** Declaration file generated by dts-gen */
import * as React from "react";
import * as Immutable from "immutable";

export type InitialState = {
  fields: Immutable.Map<string, Immutable.Map<string, Immutable.Map<string, any>>>;
};

export type Values = {[key: string]: any};
export type Error = string;
export type Valid = null;
export type Validation = (value: any, otherValues?: Values) => (Error | Valid);

export type OnChangeEvent = (event: {target: { name: string, value: any}}) => void;
export type OnFormEvent = (event: {target: { name: string}}) => void;
export type OnionFormChangeEvent = (v: {name: string, value: any}) => void;

export interface PossibleOverrideProps {
  error?: string | null;
  hint?: string | null;
  label?: string | null;
  onChange?: OnFormEvent | any;
  onBlur?: OnFormEvent | any;
  onFocus?: OnFormEvent | any;
  tooltip?: string | null;
}

export interface InputProps extends PossibleOverrideProps {
  name: string;
  onChange: OnionFormChangeEvent | OnChangeEvent | any;
  onionFormName: string;
  value: any;
  liveValidation: boolean;
  apiError: string | null;
}

export type Action = {
  type: string;
  form: string;
  field?: string;
  property?: string;
  value?: any;
  values?: Values;
};

export interface FieldProps {
  component: Object;
  name: String | string;
}

export class Field extends React.Component<FieldProps, any> {
}

export interface FormProps {
  method?: "POST" | "GET" | "PUT" | "DELETE";
  name: String | string;
  onError?: (e: {name: string, errors: {[key: string]: any}}) => void;
  onSubmit?: (s: {name: string, values: {[key: string]: any}}) => void;
  validations?: {[key: string]: Validation[]};
}

declare class Form extends React.Component<FormProps, any> {
  constructor(...args: any[]);

  static defaultProps: {
    method: string;
    validations: {[key: string]: Validation[]};
  };
}

export interface SubmitProps {
  disabled?: boolean;
  hasErrors?: boolean;
  onClick?: () => void;
}

declare class Submit extends React.Component<SubmitProps, any> {
}

export interface ButtonProps {
  disabled?: boolean;
  children: React.ReactChildren;
  onClick: () => void;
}

declare class Button extends React.Component<ButtonProps, any> {
}

type ComponentClass<P> = React.ComponentClass<P>;
type StatelessComponent<P> = React.StatelessComponent<P>;
interface ComponentDecorator<P> {
    (component: ComponentClass<P> | StatelessComponent<P>): ComponentClass<P>;
}

export function connectField<P>(fieldName: string, defaultProps?: (Values & PossibleOverrideProps), customValidations?: Validation[]): ComponentDecorator<P & PossibleOverrideProps>;

export function connectSubmit(Submit: any): any;

export function extractPropertyFromFields(fields: any, property: string): any;

export function extractPropertyFromState(state: any, formName: any, property: string): any;

export function reducer(state: InitialState, action: Action): InitialState;

export function validateField(value: any, validations: Validation[], otherValues: Values): any;

export namespace actions {
    const CLEAR_ONION_FORM_PROPERTY: string;

    const SET_ONION_FORM_FIELD_PROPERTY: string;

    const SET_ONION_FORM_MULTIPLE_FIELDS: string;

    function clearFormProperty(form: string, property: string): Action;

    function setFieldApiError(form: string, field: string, error: string | null): Action;

    function setFieldError(form: string, field: string, error: string | null): Action;

    function setFieldLiveValidation(form: string, field: boolean): Action;

    function setFieldValue(form: string, field: string, value: any): Action;

    function setFormFieldProperty(form: string, field: string, property: string, value: any): Action;

    function setMultipleFields(form: string, property: string, values: Values): Action;

}

